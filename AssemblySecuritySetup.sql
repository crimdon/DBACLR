/**********************************************
 * Script:  AssemblySecuritySetup.sql
 * Date:    2016-01-20
 * By:      Solomon Rutzky
 * Of:      Sql Quantum Leap ( http://SqlQuantumLeap.com )
 * 
 * Stairway to SQLCLR - Level 6: Development Tools
 *
 * Stairway to SQLCLR series:
 * http://www.sqlservercentral.com/stairway/105855/
 * 
 **********************************************/


USE [master];
SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
SET NOCOUNT ON;
GO
--------------------------------------------------------------------------------

DECLARE @ErrorMessage NVARCHAR(4000);


-- We first need to create the Assembly containing just
-- the Key info so that we can get the "thumbprint" /
-- "publickeytoken" value from it. That value is used to
-- determine if the Asymmetric Key and Login already exist.
--
-- We only need this Assembly temporarily, so create within
-- a transaction to guarantee cleanup if something fails.

DECLARE	@AssemblyName sysname, -- keep lower-case for servers with case-sensitive / binary collations
		@AsymmetricKeyName sysname, -- keep lower-case for servers with case-sensitive / binary collations
		@LoginName sysname, -- keep lower-case for servers with case-sensitive / binary collations
		@PublicKeyToken VARBINARY(32),
		@SQL NVARCHAR(MAX);

SET @AssemblyName = N'$StairwayToSQLCLR-TEMPORARY-KeyInfo$';

SET @AsymmetricKeyName = N'StairwayToSQLCLR-06_PermissionKey';
SET @LoginName = N'StairwayToSQLCLR-06_PermissionLogin';

BEGIN TRY
	BEGIN TRAN;

	IF (NOT EXISTS(
				SELECT	*
				FROM		[sys].[assemblies] sa
				WHERE	[sa].[name] = @AssemblyName
			)
		)
	BEGIN
		SET @SQL = N'
		CREATE ASSEMBLY [' + @AssemblyName + N']
			AUTHORIZATION [dbo]
-- Insert the result of the following command, found in _TempAssembly.sql, here:
-- FINDSTR /I /C:"FROM 0x" KeyInfo_Create.sql > _TempAssembly.sql
		    FROM 0x4D5A90000300000004000000FFFF0000B800000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000E1FBA0E00B409CD21B8014CCD21546869732070726F6772616D2063616E6E6F742062652072756E20696E20444F53206D6F64652E0D0D0A2400000000000000504500004C01030079D05D610000000000000000E00022200B013000000A0000000600000000000076280000002000000040000000000010002000000002000004000000000000000400000000000000008000000002000043E60000030040850000100000100000000010000010000000000000100000000000000000000000242800004F000000004000008C03000000000000000000000000000000000000006000000C000000EC2600001C0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000080000000000000000000000082000004800000000000000000000002E746578740000007C08000000200000000A000000020000000000000000000000000000200000602E727372630000008C0300000040000000040000000C0000000000000000000000000000400000402E72656C6F6300000C00000000600000000200000010000000000000000000000000000040000042000000000000000000000000000000005828000000000000480000000200050078200000F4050000090000000000000000000000000000006C260000800000000000000000000000000000000000000000000000000000000000000000000000133001001000000001000011007E0D00000A730E00000A0A2B00062A2202280F00000A002A00000042534A4201000100000000000C00000076322E302E35303732370000000005006C000000C4010000237E0000300200005402000023537472696E67730000000084040000040000002355530088040000100000002347554944000000980400005C01000023426C6F620000000000000002000001471402000900000000FA013300160000010000001000000002000000020000000F0000000C000000010000000100000002000000000068010100000000000600D300C90106004001C90106001F00B6010F00E9010000060033007B010600B6007B01060082007B01060027017B010600F3007B0106000C017B0106004A007B01060065007B010600220274010A00A10095010A005E01F8010600610174010000000001000000000001000100010010000D02000035000100010050200000000096002902C80001006C20000000008618B001060001000900B00101001100B00106001900B0010A002900B00110003100B00110003900B00110004100B00110004900B00110005100B00110005900B00110006100B00110007100B001060081004C021A007900B00110006900B00106002000630054012E000B00CD002E001300D6002E001B00F5002E002300FE002E002B000A012E00330018012E003B001E012E004300FE002E004B002F012E00530018012E005B00470115000480000001000000000000000100000026008D0100000200000000000000000000001D001600000000000200000000000000000000001D000A000000000000000000003C4D6F64756C653E0053797374656D2E44617461006D73636F726C69620044656275676761626C6541747472696275746500417373656D626C795469746C6541747472696275746500417373656D626C7954726164656D61726B41747472696275746500417373656D626C7946696C6556657273696F6E41747472696275746500417373656D626C79436F6E66696775726174696F6E4174747269627574650053716C46756E6374696F6E41747472696275746500417373656D626C794465736372697074696F6E41747472696275746500436F6D70696C6174696F6E52656C61786174696F6E7341747472696275746500417373656D626C7950726F6475637441747472696275746500417373656D626C79436F7079726967687441747472696275746500417373656D626C79436F6D70616E794174747269627574650052756E74696D65436F6D7061746962696C6974794174747269627574650053716C537472696E67004B6579496E666F2E646C6C0053797374656D0053797374656D2E5265666C656374696F6E004B6579496E666F004D6963726F736F66742E53716C5365727665722E536572766572002E63746F720053797374656D2E446961676E6F73746963730053797374656D2E52756E74696D652E436F6D70696C6572536572766963657300446562756767696E674D6F6465730053797374656D2E446174612E53716C54797065730055736572446566696E656446756E6374696F6E73004F626A656374004F6E6C794E6565646564546F47656E6572617465437265617465417373656D626C7900456D707479000000000000003B2D4BC1ED725243946AF8B163219BEB00042001010803200001052001011111042001010E040701113D02060E08B77A5C561934E08980A00024000004800000940000000602000000240000525341310004000001000100A5E788E7262478652ECACC3EC0CF025DC9A480062FA236E63ED5D37C87A28E50F6B955502EF4494AA27128E1D23B5044165CC23CD89FDFC350DCD3343DF1795F0E8135184F398797D4019CE5C84E54E9595BB9433313DD18F8C84B64BF92565F9533D8D7C6DA42B3F04B17CCBA7E1356DCEF9ECA11DB69118BF120310F337FEB040000113D0801000800000000001E01000100540216577261704E6F6E457863657074696F6E5468726F7773010801000701000000000B010006444241434C5200000D0100084B657920496E666F00000501000000001001000B436F6C6C696E67776F6F64000017010012436F7079726967687420C2A920203230313800000C010007312E302E302E300000040100000000000052BC1554979F6FD3B9A7967489D4C3AF1D5C07A594D2174C7C3C156A3E15C85EA1B9EEADF63194193B37020A90761808A619A54A499FEA77DCFE3E54FADE4E739EED932A19A1CFFF00098368FACD9F83009F5AEC84A9A4C1DDFF0CC98E7834B916B102FCD09E953987C3DEDA675F969290AB3CBB7DE747B4568FE32842DC15810000000079D05D6100000000020000001C0100000827000008090000525344536428B5449A6D604DA41A2AB8BC8150FE01000000433A5C55736572735C616E647265772E6C61636B656E62795C446F63756D656E74735C4769744875625C444241434C525C4B6579496E666F5C6F626A5C44656275675C4B6579496E666F2E70646200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004C28000000000000000000006628000000200000000000000000000000000000000000000000000058280000000000000000000000005F436F72446C6C4D61696E006D73636F7265652E646C6C0000000000FF25002000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100100000001800008000000000000000000000000000000100010000003000008000000000000000000000000000000100000000004800000058400000300300000000000000000000300334000000560053005F00560045005200530049004F004E005F0049004E0046004F0000000000BD04EFFE00000100000001000000000000000100000000003F000000000000000400000002000000000000000000000000000000440000000100560061007200460069006C00650049006E0066006F00000000002400040000005400720061006E0073006C006100740069006F006E00000000000000B00490020000010053007400720069006E006700460069006C00650049006E0066006F0000006C02000001003000300030003000300034006200300000002A000900010043006F006D006D0065006E007400730000004B0065007900200049006E0066006F000000000038000C00010043006F006D00700061006E0079004E0061006D0065000000000043006F006C006C0069006E00670077006F006F0064000000360007000100460069006C0065004400650073006300720069007000740069006F006E000000000044004200410043004C00520000000000300008000100460069006C006500560065007200730069006F006E000000000031002E0030002E0030002E003000000038000C00010049006E007400650072006E0061006C004E0061006D00650000004B006500790049006E0066006F002E0064006C006C0000004800120001004C006500670061006C0043006F007000790072006900670068007400000043006F0070007900720069006700680074002000A90020002000320030003100380000002A00010001004C006500670061006C00540072006100640065006D00610072006B007300000000000000000040000C0001004F0072006900670069006E0061006C00460069006C0065006E0061006D00650000004B006500790049006E0066006F002E0064006C006C0000002E0007000100500072006F0064007500630074004E0061006D0065000000000044004200410043004C00520000000000340008000100500072006F006400750063007400560065007200730069006F006E00000031002E0030002E0030002E003000000038000800010041007300730065006D0062006C0079002000560065007200730069006F006E00000031002E0030002E0030002E0030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000C000000783800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
';
		EXEC (@SQL);
	END;


	SET @PublicKeyToken = CONVERT(VARBINARY(32), ASSEMBLYPROPERTY(@AssemblyName, 'PublicKey'));

	IF (NOT EXISTS(
				SELECT	*
				FROM		[sys].[asymmetric_keys] sak
				WHERE	sak.[thumbprint] = @PublicKeyToken
			)
		)
	BEGIN
		SET @SQL = N'
		CREATE ASYMMETRIC KEY [' + @AsymmetricKeyName + N']
			AUTHORIZATION [dbo]
			FROM ASSEMBLY [' + @AssemblyName + N'];';
		EXEC (@SQL);
	END;

	SET @SQL = N'DROP ASSEMBLY [' + @AssemblyName + N'];';
	EXEC (@SQL);

	COMMIT TRAN;
END TRY
BEGIN CATCH
	IF (@@TRANCOUNT > 0)
	BEGIN
		ROLLBACK TRAN;
	END;

	SET @ErrorMessage = ERROR_MESSAGE();
	RAISERROR(@ErrorMessage, 16, 1);
	RETURN; -- exit the script
END CATCH;


-- If the Asymmetric Key exists but the Login does not exist, we need to:
-- 1) Create the Login
-- 2) Grant the appropriate permission
IF (EXISTS(
			SELECT	*
			FROM		[sys].[asymmetric_keys] sak
			WHERE	sak.[thumbprint] = @PublicKeyToken
		)
	) AND
	(NOT EXISTS(
			SELECT		*
			FROM			[sys].[server_principals] sp
			INNER JOIN	[sys].[asymmetric_keys] sak
					ON	sak.[sid] = sp.[sid]
			WHERE	sak.[thumbprint] = @PublicKeyToken
		)
	)
BEGIN
	BEGIN TRY
		BEGIN TRAN;

		SET @SQL = N'
		CREATE LOGIN [' + @LoginName + N']
			FROM ASYMMETRIC KEY [' + @AsymmetricKeyName + N'];';
		EXEC (@SQL);

		SET @SQL = N'
		GRANT EXTERNAL ACCESS ASSEMBLY TO [' + @LoginName + N'];
		-- OR, comment out the GRANT statement above, and uncomment the following:
		-- GRANT UNSAFE ASSEMBLY TO [' + @LoginName + N'];
		';
		EXEC (@SQL);

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF (@@TRANCOUNT > 0)
		BEGIN
			ROLLBACK TRAN;
		END;

		SET @ErrorMessage = ERROR_MESSAGE();
		RAISERROR(@ErrorMessage, 16, 1);
		RETURN; -- exit the script
	END CATCH;
END;
--------------------------------------------------------------------------------


